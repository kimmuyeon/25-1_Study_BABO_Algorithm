#주식 가격
def solution(prices):
    n = len(prices)
    answer = [0]*n    #결과 저장 리스트
    stack = []        #계산을 위해 사용할 스택

    for i in range(n):
        # 현재 가격이 스택의 마지막 가격보다 낮으면 그때 스택에서 인덱스 빼냄
        while stack and prices[i] < prices[stack[-1]]:
            j = stack.pop()
            answer[j] = i-j   #i-j = 가격이 떨어지기 전까지의 시간
        stack.append(i)   #스택   에 인덱스 추가

        #스택에 남아있는 나머지 인덱스들 중 끝까지 가격이 떨어지지 않은 경우
    while stack:
        j = stack.pop()
        answer[j] = n-j-1
    return answer


# 프로그래머스 - 타겟 넘버
def solution(numbers, target):
    def dfs(index, current_sum):
        if index == len(numbers):
            return 1 if current_sum == target else 0
        # 덧셈 -> index+1 & current_sum+(숫자) // 뺄셈 -> index+1 & current_sum-(숫자)
        return dfs(index+1, current_sum+numbers[index]) + dfs(index+1, current_sum-numbers[index])

    return dfs(0,0)   #dfs 호출

