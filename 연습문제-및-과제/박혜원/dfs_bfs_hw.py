# -*- coding: utf-8 -*-
"""DFS/BFS_HW.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i3f3pU2fdmXo7XsMEvNkFOOyyXpFp1Jh

#주식 가격
"""

def solution(prices):
    n = len(prices)
    answer = [0] * n
    stack = []

    for i in range(n):
        # 스택에 남아있는 인덱스들의 가격과 현재 가격을 비교
        while stack and prices[stack[-1]] > prices[i]:
            top = stack.pop()
            answer[top] = i - top
        stack.append(i)

    # 끝까지 가격이 떨어지지 않은 경우 처리
    while stack:
        top = stack.pop()
        answer[top] = len(prices) - 1 - top

    return answer

# 테스트
prices = [1, 2, 3, 2, 3]
print(solution(prices))  # [4, 3, 1, 1, 0]

"""#타겟 넘버"""

def solution(numbers, target):
    def dfs(index, current_sum):
        # 모든 숫자를 사용했을 때
        if index == len(numbers):
            # 현재 합이 타겟 넘버와 같으면 1을 반환
            return 1 if current_sum == target else 0

        # 현재 숫자를 더하거나 빼는 두 가지 경우의 합
        return dfs(index + 1, current_sum + numbers[index]) + dfs(index + 1, current_sum - numbers[index])

    # DFS 탐색 시작
    return dfs(0, 0)

# 테스트
numbers = [1, 1, 1, 1, 1]
target = 3
print(solution(numbers, target))  # 출력: 5